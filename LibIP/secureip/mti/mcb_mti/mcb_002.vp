`timescale 1ps / 1ps

module MCB_WRAP #(  // Verilog-2001
  parameter integer ARB_NUM_TIME_SLOTS = 12,
  parameter ARB_TIME_SLOT_0 = "111111111111111111",
  parameter ARB_TIME_SLOT_1 = "111111111111111111",
  parameter ARB_TIME_SLOT_10 = "111111111111111111",
  parameter ARB_TIME_SLOT_11 = "111111111111111111",
  parameter ARB_TIME_SLOT_2 = "111111111111111111",
  parameter ARB_TIME_SLOT_3 = "111111111111111111",
  parameter ARB_TIME_SLOT_4 = "111111111111111111",
  parameter ARB_TIME_SLOT_5 = "111111111111111111",
  parameter ARB_TIME_SLOT_6 = "111111111111111111",
  parameter ARB_TIME_SLOT_7 = "111111111111111111",
  parameter ARB_TIME_SLOT_8 = "111111111111111111",
  parameter ARB_TIME_SLOT_9 = "111111111111111111",
  parameter CAL_BA = "0",
  parameter CAL_BYPASS = "YES",
  parameter CAL_CA = "000",
  parameter CAL_CALIBRATION_MODE = "CALIBRATION",
  parameter integer CAL_CLK_DIV = 1,
  parameter CAL_DELAY = "QUARTER",
  parameter CAL_RA = "0000",
  parameter MEM_ADDR_ORDER = "BANK_ROW_COLUMN",
  parameter integer MEM_BA_SIZE = 3,
  parameter integer MEM_BURST_LEN = 8,
  parameter integer MEM_CAS_LATENCY = 4,
  parameter integer MEM_CA_SIZE = 11,
  parameter MEM_DDR1_2_ODS = "FULL",
  parameter MEM_DDR2_3_HIGH_TEMP_SR = "NORMAL",
  parameter MEM_DDR2_3_PA_SR = "FULL",
  parameter integer MEM_DDR2_ADD_LATENCY = 0,
  parameter MEM_DDR2_DIFF_DQS_EN = "YES",
  parameter MEM_DDR2_RTT = "50OHMS",
  parameter integer MEM_DDR2_WRT_RECOVERY = 4,
  parameter MEM_DDR3_ADD_LATENCY = "OFF",
  parameter MEM_DDR3_AUTO_SR = "ENABLED",
  parameter integer MEM_DDR3_CAS_LATENCY = 7,
  parameter integer MEM_DDR3_CAS_WR_LATENCY = 5,
  parameter MEM_DDR3_DYN_WRT_ODT = "OFF",
  parameter MEM_DDR3_ODS = "DIV7",
  parameter MEM_DDR3_RTT = "DIV2",
  parameter integer MEM_DDR3_WRT_RECOVERY = 7,
  parameter MEM_MDDR_ODS = "FULL",
  parameter MEM_MOBILE_PA_SR = "FULL",
  parameter integer MEM_MOBILE_TC_SR = 0,
  parameter integer MEM_RAS_VAL = 0,
  parameter integer MEM_RA_SIZE = 13,
  parameter integer MEM_RCD_VAL = 1,
  parameter integer MEM_REFI_VAL = 0,
  parameter integer MEM_RFC_VAL = 0,
  parameter integer MEM_RP_VAL = 0,
  parameter integer MEM_RTP_VAL = 0,
  parameter MEM_TYPE = "DDR3",
  parameter integer MEM_WIDTH = 4,
  parameter integer MEM_WR_VAL = 0,
  parameter integer MEM_WTR_VAL = 3,
  parameter PORT_CONFIG = "B32_B32_B32_B32"
  ) (
  output CAS,
  output CKE,
  output DQIOWEN0,
  output DQSIOWEN90N,
  output DQSIOWEN90P,
  output IOIDRPADD,
  output IOIDRPBROADCAST,
  output IOIDRPCLK,
  output IOIDRPCS,
  output IOIDRPSDO,
  output IOIDRPTRAIN,
  output IOIDRPUPDATE,
  output LDMN,
  output LDMP,
  output ODT,
  output P0CMDEMPTY,
  output P0CMDFULL,
  output P0RDEMPTY,
  output P0RDERROR,
  output P0RDFULL,
  output P0RDOVERFLOW,
  output P0WREMPTY,
  output P0WRERROR,
  output P0WRFULL,
  output P0WRUNDERRUN,
  output P1CMDEMPTY,
  output P1CMDFULL,
  output P1RDEMPTY,
  output P1RDERROR,
  output P1RDFULL,
  output P1RDOVERFLOW,
  output P1WREMPTY,
  output P1WRERROR,
  output P1WRFULL,
  output P1WRUNDERRUN,
  output P2CMDEMPTY,
  output P2CMDFULL,
  output P2EMPTY,
  output P2ERROR,
  output P2FULL,
  output P2RDOVERFLOW,
  output P2WRUNDERRUN,
  output P3CMDEMPTY,
  output P3CMDFULL,
  output P3EMPTY,
  output P3ERROR,
  output P3FULL,
  output P3RDOVERFLOW,
  output P3WRUNDERRUN,
  output P4CMDEMPTY,
  output P4CMDFULL,
  output P4EMPTY,
  output P4ERROR,
  output P4FULL,
  output P4RDOVERFLOW,
  output P4WRUNDERRUN,
  output P5CMDEMPTY,
  output P5CMDFULL,
  output P5EMPTY,
  output P5ERROR,
  output P5FULL,
  output P5RDOVERFLOW,
  output P5WRUNDERRUN,
  output RAS,
  output RST,
  output SELFREFRESHMODE,
  output UDMN,
  output UDMP,
  output UOCALSTART,
  output UOCMDREADYIN,
  output UODATAVALID,
  output UODONECAL,
  output UOREFRSHFLAG,
  output UOSDO,
  output WE,
  output [14:0] ADDR,
  output [15:0] DQON,
  output [15:0] DQOP,
  output [2:0] BA,
  output [31:0] P0RDDATA,
  output [31:0] P1RDDATA,
  output [31:0] P2RDDATA,
  output [31:0] P3RDDATA,
  output [31:0] P4RDDATA,
  output [31:0] P5RDDATA,
  output [31:0] STATUS,
  output [4:0] IOIDRPADDR,
  output [6:0] P0RDCOUNT,
  output [6:0] P0WRCOUNT,
  output [6:0] P1RDCOUNT,
  output [6:0] P1WRCOUNT,
  output [6:0] P2COUNT,
  output [6:0] P3COUNT,
  output [6:0] P4COUNT,
  output [6:0] P5COUNT,
  output [7:0] UODATA,
  input DQSIOIN,
  input DQSIOIP,
  input IOIDRPSDI,
  input P0ARBEN,
  input P0CMDCLK,
  input P0CMDEN,
  input P0RDCLK,
  input P0RDEN,
  input P0WRCLK,
  input P0WREN,
  input P1ARBEN,
  input P1CMDCLK,
  input P1CMDEN,
  input P1RDCLK,
  input P1RDEN,
  input P1WRCLK,
  input P1WREN,
  input P2ARBEN,
  input P2CLK,
  input P2CMDCLK,
  input P2CMDEN,
  input P2EN,
  input P3ARBEN,
  input P3CLK,
  input P3CMDCLK,
  input P3CMDEN,
  input P3EN,
  input P4ARBEN,
  input P4CLK,
  input P4CMDCLK,
  input P4CMDEN,
  input P4EN,
  input P5ARBEN,
  input P5CLK,
  input P5CMDCLK,
  input P5CMDEN,
  input P5EN,
  input PLLLOCK,
  input RECAL,
  input SELFREFRESHENTER,
  input SYSRST,
  input UDQSIOIN,
  input UDQSIOIP,
  input UIADD,
  input UIBROADCAST,
  input UICLK,
  input UICMD,
  input UICMDEN,
  input UICMDIN,
  input UICS,
  input UIDONECAL,
  input UIDQLOWERDEC,
  input UIDQLOWERINC,
  input UIDQUPPERDEC,
  input UIDQUPPERINC,
  input UIDRPUPDATE,
  input UILDQSDEC,
  input UILDQSINC,
  input UIREAD,
  input UISDI,
  input UIUDQSDEC,
  input UIUDQSINC,
  input [11:0] P0CMDCA,
  input [11:0] P1CMDCA,
  input [11:0] P2CMDCA,
  input [11:0] P3CMDCA,
  input [11:0] P4CMDCA,
  input [11:0] P5CMDCA,
  input [14:0] P0CMDRA,
  input [14:0] P1CMDRA,
  input [14:0] P2CMDRA,
  input [14:0] P3CMDRA,
  input [14:0] P4CMDRA,
  input [14:0] P5CMDRA,
  input [15:0] DQI,
  input [1:0] PLLCE,
  input [1:0] PLLCLK,
  input [2:0] P0CMDBA,
  input [2:0] P0CMDINSTR,
  input [2:0] P1CMDBA,
  input [2:0] P1CMDINSTR,
  input [2:0] P2CMDBA,
  input [2:0] P2CMDINSTR,
  input [2:0] P3CMDBA,
  input [2:0] P3CMDINSTR,
  input [2:0] P4CMDBA,
  input [2:0] P4CMDINSTR,
  input [2:0] P5CMDBA,
  input [2:0] P5CMDINSTR,
  input [31:0] P0WRDATA,
  input [31:0] P1WRDATA,
  input [31:0] P2WRDATA,
  input [31:0] P3WRDATA,
  input [31:0] P4WRDATA,
  input [31:0] P5WRDATA,
  input [3:0] P0RWRMASK,
  input [3:0] P1RWRMASK,
  input [3:0] P2WRMASK,
  input [3:0] P3WRMASK,
  input [3:0] P4WRMASK,
  input [3:0] P5WRMASK,
  input [3:0] UIDQCOUNT,
  input [4:0] UIADDR,
  input [5:0] P0CMDBL,
  input [5:0] P1CMDBL,
  input [5:0] P2CMDBL,
  input [5:0] P3CMDBL,
  input [5:0] P4CMDBL,
  input [5:0] P5CMDBL,  
  input GSR
);


function [255 : 0] convert; 
    input [511:0] init_inp; 
    integer k, t;
    integer count_tmp;
    reg [7:0] tmp_int;
begin 
count_tmp = 0;
for (k = 511; k >= 7; k = k-8) begin
      tmp_int = {init_inp[k],init_inp[k-1],init_inp[k-2],init_inp[k-3],init_inp[k-4],init_inp[k-5],init_inp[k-6],init_inp[k-7]};
      for (t = (255 - (count_tmp*4)); t >= ((255 - (count_tmp*4))-3) ; t = t - 4) begin
        case(tmp_int)
        8'b00110000 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b0000;
        8'b00110001 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b0001;
        8'b00110010 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b0010;
        8'b00110011 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b0011;
        8'b00110100 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b0100;
        8'b00110101 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b0101;
        8'b00110110 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b0110;
        8'b00110111 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b0111;
        8'b00111000 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1000;
        8'b00111001 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1001;
        // Uppercase a-f
        8'b01000001 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1010;
        8'b01000010 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1011;
        8'b01000011 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1100;
        8'b01000100 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1101;
        8'b01000101 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1110;
        8'b01000110 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1111;
        // Lowercase a-f
        8'b01100001 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1010;
        8'b01100010 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1011;
        8'b01100011 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1100;
        8'b01100100 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1101;
        8'b01100101 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1110;
        8'b01100110 : {convert[t-0], convert[t-1], convert[t-2], convert[t-3]} = 4'b1111;
        endcase  
    	end
        count_tmp = count_tmp+1;
       end

    end
endfunction

function [63:0] convertbin;
    input [511:0] inp;
    integer i,j;
    reg [7:0] tmp_bin;
    integer countbin ;
begin
     countbin =1;
     for (i = 511; i >= 7; i = i-8) begin
      tmp_bin = {inp[i],inp[i-1],inp[i-2],inp[i-3],inp[i-4],inp[i-5],inp[i-6],inp[i-7]};
       for (j = (64 - (countbin)) ; j >= (63 - (countbin)) ; j = j-1 ) begin
        case(tmp_bin)
         8'b00110000 : convertbin[j] = 1'b0;
         8'b00110001 : convertbin[j] = 1'b1;
       endcase
      end
      countbin = countbin+1;
    end
 end
 endfunction
 
localparam [17:0] ARB_TIME_SLOT_0_conv = convertbin(ARB_TIME_SLOT_0);
localparam [17:0] ARB_TIME_SLOT_1_conv = convertbin(ARB_TIME_SLOT_1);
localparam [17:0] ARB_TIME_SLOT_10_conv = convertbin(ARB_TIME_SLOT_10);
localparam [17:0] ARB_TIME_SLOT_11_conv = convertbin(ARB_TIME_SLOT_11);
localparam [17:0] ARB_TIME_SLOT_2_conv = convertbin(ARB_TIME_SLOT_2);
localparam [17:0] ARB_TIME_SLOT_3_conv = convertbin(ARB_TIME_SLOT_3);
localparam [17:0] ARB_TIME_SLOT_4_conv = convertbin(ARB_TIME_SLOT_4);
localparam [17:0] ARB_TIME_SLOT_5_conv = convertbin(ARB_TIME_SLOT_5);
localparam [17:0] ARB_TIME_SLOT_6_conv = convertbin(ARB_TIME_SLOT_6);
localparam [17:0] ARB_TIME_SLOT_7_conv = convertbin(ARB_TIME_SLOT_7);
localparam [17:0] ARB_TIME_SLOT_8_conv = convertbin(ARB_TIME_SLOT_8);
localparam [17:0] ARB_TIME_SLOT_9_conv = convertbin(ARB_TIME_SLOT_9);
localparam [2:0] CAL_BA_conv = convert(CAL_BA);
localparam [11:0] CAL_CA_conv = convert(CAL_CA);
localparam [14:0] CAL_RA_conv = convert(CAL_RA);


B_MCB #(
  .ARB_NUM_TIME_SLOTS (ARB_NUM_TIME_SLOTS),
  .ARB_TIME_SLOT_0 (ARB_TIME_SLOT_0_conv),
  .ARB_TIME_SLOT_1 (ARB_TIME_SLOT_1_conv),
  .ARB_TIME_SLOT_10 (ARB_TIME_SLOT_10_conv),
  .ARB_TIME_SLOT_11 (ARB_TIME_SLOT_11_conv),
  .ARB_TIME_SLOT_2 (ARB_TIME_SLOT_2_conv),
  .ARB_TIME_SLOT_3 (ARB_TIME_SLOT_3_conv),
  .ARB_TIME_SLOT_4 (ARB_TIME_SLOT_4_conv),
  .ARB_TIME_SLOT_5 (ARB_TIME_SLOT_5_conv),
  .ARB_TIME_SLOT_6 (ARB_TIME_SLOT_6_conv),
  .ARB_TIME_SLOT_7 (ARB_TIME_SLOT_7_conv),
  .ARB_TIME_SLOT_8 (ARB_TIME_SLOT_8_conv),
  .ARB_TIME_SLOT_9 (ARB_TIME_SLOT_9_conv),
  .CAL_BA (CAL_BA_conv),
  .CAL_BYPASS (CAL_BYPASS),
  .CAL_CA (CAL_CA_conv),
  .CAL_CALIBRATION_MODE (CAL_CALIBRATION_MODE),
  .CAL_CLK_DIV (CAL_CLK_DIV),
  .CAL_DELAY (CAL_DELAY),
  .CAL_RA (CAL_RA_conv),
  .MEM_ADDR_ORDER (MEM_ADDR_ORDER),
  .MEM_BA_SIZE (MEM_BA_SIZE),
  .MEM_BURST_LEN (MEM_BURST_LEN),
  .MEM_CAS_LATENCY (MEM_CAS_LATENCY),
  .MEM_CA_SIZE (MEM_CA_SIZE),
  .MEM_DDR1_2_ODS (MEM_DDR1_2_ODS),
  .MEM_DDR2_3_HIGH_TEMP_SR (MEM_DDR2_3_HIGH_TEMP_SR),
  .MEM_DDR2_3_PA_SR (MEM_DDR2_3_PA_SR),
  .MEM_DDR2_ADD_LATENCY (MEM_DDR2_ADD_LATENCY),
  .MEM_DDR2_DIFF_DQS_EN (MEM_DDR2_DIFF_DQS_EN),
  .MEM_DDR2_RTT (MEM_DDR2_RTT),
  .MEM_DDR2_WRT_RECOVERY (MEM_DDR2_WRT_RECOVERY),
  .MEM_DDR3_ADD_LATENCY (MEM_DDR3_ADD_LATENCY),
  .MEM_DDR3_AUTO_SR (MEM_DDR3_AUTO_SR),
  .MEM_DDR3_CAS_LATENCY (MEM_DDR3_CAS_LATENCY),
  .MEM_DDR3_CAS_WR_LATENCY (MEM_DDR3_CAS_WR_LATENCY),
  .MEM_DDR3_DYN_WRT_ODT (MEM_DDR3_DYN_WRT_ODT),
  .MEM_DDR3_ODS (MEM_DDR3_ODS),
  .MEM_DDR3_RTT (MEM_DDR3_RTT),
  .MEM_DDR3_WRT_RECOVERY (MEM_DDR3_WRT_RECOVERY),
  .MEM_MDDR_ODS (MEM_MDDR_ODS),
  .MEM_MOBILE_PA_SR (MEM_MOBILE_PA_SR),
  .MEM_MOBILE_TC_SR (MEM_MOBILE_TC_SR),
  .MEM_RAS_VAL (MEM_RAS_VAL),
  .MEM_RA_SIZE (MEM_RA_SIZE),
  .MEM_RCD_VAL (MEM_RCD_VAL),
  .MEM_REFI_VAL (MEM_REFI_VAL),
  .MEM_RFC_VAL (MEM_RFC_VAL),
  .MEM_RP_VAL (MEM_RP_VAL),
  .MEM_RTP_VAL (MEM_RTP_VAL),
  .MEM_TYPE (MEM_TYPE),
  .MEM_WIDTH (MEM_WIDTH),
  .MEM_WR_VAL (MEM_WR_VAL),
  .MEM_WTR_VAL (MEM_WTR_VAL),
  .PORT_CONFIG (PORT_CONFIG)
  )
  B_MCB_INST (
  .ADDR (ADDR[14:0]),
  .BA (BA[2:0]),
  .CAS (CAS),
  .CKE (CKE),
  .DQIOWEN0 (DQIOWEN0),
  .DQON (DQON[15:0]),
  .DQOP (DQOP[15:0]),
  .DQSIOWEN90N (DQSIOWEN90N),
  .DQSIOWEN90P (DQSIOWEN90P),
  .IOIDRPADD (IOIDRPADD),
  .IOIDRPADDR (IOIDRPADDR[4:0]),
  .IOIDRPBROADCAST (IOIDRPBROADCAST),
  .IOIDRPCLK (IOIDRPCLK),
  .IOIDRPCS (IOIDRPCS),
  .IOIDRPSDO (IOIDRPSDO),
  .IOIDRPTRAIN (IOIDRPTRAIN),
  .IOIDRPUPDATE (IOIDRPUPDATE),
  .LDMN (LDMN),
  .LDMP (LDMP),
  .ODT (ODT),
  .P0CMDEMPTY (P0CMDEMPTY),
  .P0CMDFULL (P0CMDFULL),
  .P0RDCOUNT (P0RDCOUNT[6:0]),
  .P0RDDATA (P0RDDATA[31:0]),
  .P0RDEMPTY (P0RDEMPTY),
  .P0RDERROR (P0RDERROR),
  .P0RDFULL (P0RDFULL),
  .P0RDOVERFLOW (P0RDOVERFLOW),
  .P0WRCOUNT (P0WRCOUNT[6:0]),
  .P0WREMPTY (P0WREMPTY),
  .P0WRERROR (P0WRERROR),
  .P0WRFULL (P0WRFULL),
  .P0WRUNDERRUN (P0WRUNDERRUN),
  .P1CMDEMPTY (P1CMDEMPTY),
  .P1CMDFULL (P1CMDFULL),
  .P1RDCOUNT (P1RDCOUNT[6:0]),
  .P1RDDATA (P1RDDATA[31:0]),
  .P1RDEMPTY (P1RDEMPTY),
  .P1RDERROR (P1RDERROR),
  .P1RDFULL (P1RDFULL),
  .P1RDOVERFLOW (P1RDOVERFLOW),
  .P1WRCOUNT (P1WRCOUNT[6:0]),
  .P1WREMPTY (P1WREMPTY),
  .P1WRERROR (P1WRERROR),
  .P1WRFULL (P1WRFULL),
  .P1WRUNDERRUN (P1WRUNDERRUN),
  .P2CMDEMPTY (P2CMDEMPTY),
  .P2CMDFULL (P2CMDFULL),
  .P2COUNT (P2COUNT[6:0]),
  .P2EMPTY (P2EMPTY),
  .P2ERROR (P2ERROR),
  .P2FULL (P2FULL),
  .P2RDDATA (P2RDDATA[31:0]),
  .P2RDOVERFLOW (P2RDOVERFLOW),
  .P2WRUNDERRUN (P2WRUNDERRUN),
  .P3CMDEMPTY (P3CMDEMPTY),
  .P3CMDFULL (P3CMDFULL),
  .P3COUNT (P3COUNT[6:0]),
  .P3EMPTY (P3EMPTY),
  .P3ERROR (P3ERROR),
  .P3FULL (P3FULL),
  .P3RDDATA (P3RDDATA[31:0]),
  .P3RDOVERFLOW (P3RDOVERFLOW),
  .P3WRUNDERRUN (P3WRUNDERRUN),
  .P4CMDEMPTY (P4CMDEMPTY),
  .P4CMDFULL (P4CMDFULL),
  .P4COUNT (P4COUNT[6:0]),
  .P4EMPTY (P4EMPTY),
  .P4ERROR (P4ERROR),
  .P4FULL (P4FULL),
  .P4RDDATA (P4RDDATA[31:0]),
  .P4RDOVERFLOW (P4RDOVERFLOW),
  .P4WRUNDERRUN (P4WRUNDERRUN),
  .P5CMDEMPTY (P5CMDEMPTY),
  .P5CMDFULL (P5CMDFULL),
  .P5COUNT (P5COUNT[6:0]),
  .P5EMPTY (P5EMPTY),
  .P5ERROR (P5ERROR),
  .P5FULL (P5FULL),
  .P5RDDATA (P5RDDATA[31:0]),
  .P5RDOVERFLOW (P5RDOVERFLOW),
  .P5WRUNDERRUN (P5WRUNDERRUN),
  .RAS (RAS),
  .RST (RST),
  .SELFREFRESHMODE (SELFREFRESHMODE),
  .STATUS (STATUS[31:0]),
  .UDMN (UDMN),
  .UDMP (UDMP),
  .UOCALSTART (UOCALSTART),
  .UOCMDREADYIN (UOCMDREADYIN),
  .UODATA (UODATA[7:0]),
  .UODATAVALID (UODATAVALID),
  .UODONECAL (UODONECAL),
  .UOREFRSHFLAG (UOREFRSHFLAG),
  .UOSDO (UOSDO),
  .WE (WE),
  .DQI (DQI[15:0]),
  .DQSIOIN (DQSIOIN),
  .DQSIOIP (DQSIOIP),
  .IOIDRPSDI (IOIDRPSDI),
  .P0ARBEN (P0ARBEN),
  .P0CMDBA (P0CMDBA[2:0]),
  .P0CMDBL (P0CMDBL[5:0]),
  .P0CMDCA (P0CMDCA[11:0]),
  .P0CMDCLK (P0CMDCLK),
  .P0CMDEN (P0CMDEN),
  .P0CMDINSTR (P0CMDINSTR[2:0]),
  .P0CMDRA (P0CMDRA[14:0]),
  .P0RDCLK (P0RDCLK),
  .P0RDEN (P0RDEN),
  .P0RWRMASK (P0RWRMASK[3:0]),
  .P0WRCLK (P0WRCLK),
  .P0WRDATA (P0WRDATA[31:0]),
  .P0WREN (P0WREN),
  .P1ARBEN (P1ARBEN),
  .P1CMDBA (P1CMDBA[2:0]),
  .P1CMDBL (P1CMDBL[5:0]),
  .P1CMDCA (P1CMDCA[11:0]),
  .P1CMDCLK (P1CMDCLK),
  .P1CMDEN (P1CMDEN),
  .P1CMDINSTR (P1CMDINSTR[2:0]),
  .P1CMDRA (P1CMDRA[14:0]),
  .P1RDCLK (P1RDCLK),
  .P1RDEN (P1RDEN),
  .P1RWRMASK (P1RWRMASK[3:0]),
  .P1WRCLK (P1WRCLK),
  .P1WRDATA (P1WRDATA[31:0]),
  .P1WREN (P1WREN),
  .P2ARBEN (P2ARBEN),
  .P2CLK (P2CLK),
  .P2CMDBA (P2CMDBA[2:0]),
  .P2CMDBL (P2CMDBL[5:0]),
  .P2CMDCA (P2CMDCA[11:0]),
  .P2CMDCLK (P2CMDCLK),
  .P2CMDEN (P2CMDEN),
  .P2CMDINSTR (P2CMDINSTR[2:0]),
  .P2CMDRA (P2CMDRA[14:0]),
  .P2EN (P2EN),
  .P2WRDATA (P2WRDATA[31:0]),
  .P2WRMASK (P2WRMASK[3:0]),
  .P3ARBEN (P3ARBEN),
  .P3CLK (P3CLK),
  .P3CMDBA (P3CMDBA[2:0]),
  .P3CMDBL (P3CMDBL[5:0]),
  .P3CMDCA (P3CMDCA[11:0]),
  .P3CMDCLK (P3CMDCLK),
  .P3CMDEN (P3CMDEN),
  .P3CMDINSTR (P3CMDINSTR[2:0]),
  .P3CMDRA (P3CMDRA[14:0]),
  .P3EN (P3EN),
  .P3WRDATA (P3WRDATA[31:0]),
  .P3WRMASK (P3WRMASK[3:0]),
  .P4ARBEN (P4ARBEN),
  .P4CLK (P4CLK),
  .P4CMDBA (P4CMDBA[2:0]),
  .P4CMDBL (P4CMDBL[5:0]),
  .P4CMDCA (P4CMDCA[11:0]),
  .P4CMDCLK (P4CMDCLK),
  .P4CMDEN (P4CMDEN),
  .P4CMDINSTR (P4CMDINSTR[2:0]),
  .P4CMDRA (P4CMDRA[14:0]),
  .P4EN (P4EN),
  .P4WRDATA (P4WRDATA[31:0]),
  .P4WRMASK (P4WRMASK[3:0]),
  .P5ARBEN (P5ARBEN),
  .P5CLK (P5CLK),
  .P5CMDBA (P5CMDBA[2:0]),
  .P5CMDBL (P5CMDBL[5:0]),
  .P5CMDCA (P5CMDCA[11:0]),
  .P5CMDCLK (P5CMDCLK),
  .P5CMDEN (P5CMDEN),
  .P5CMDINSTR (P5CMDINSTR[2:0]),
  .P5CMDRA (P5CMDRA[14:0]),
  .P5EN (P5EN),
  .P5WRDATA (P5WRDATA[31:0]),
  .P5WRMASK (P5WRMASK[3:0]),
  .PLLCE (PLLCE[1:0]),
  .PLLCLK (PLLCLK[1:0]),
  .PLLLOCK (PLLLOCK),
  .RECAL (RECAL),
  .SELFREFRESHENTER (SELFREFRESHENTER),
  .SYSRST (SYSRST),
  .UDQSIOIN (UDQSIOIN),
  .UDQSIOIP (UDQSIOIP),
  .UIADD (UIADD),
  .UIADDR (UIADDR[4:0]),
  .UIBROADCAST (UIBROADCAST),
  .UICLK (UICLK),
  .UICMD (UICMD),
  .UICMDEN (UICMDEN),
  .UICMDIN (UICMDIN),
  .UICS (UICS),
  .UIDONECAL (UIDONECAL),
  .UIDQCOUNT (UIDQCOUNT[3:0]),
  .UIDQLOWERDEC (UIDQLOWERDEC),
  .UIDQLOWERINC (UIDQLOWERINC),
  .UIDQUPPERDEC (UIDQUPPERDEC),
  .UIDQUPPERINC (UIDQUPPERINC),
  .UIDRPUPDATE (UIDRPUPDATE),
  .UILDQSDEC (UILDQSDEC),
  .UILDQSINC (UILDQSINC),
  .UIREAD (UIREAD),
  .UISDI (UISDI),
  .UIUDQSDEC (UIUDQSDEC),
  .UIUDQSINC (UIUDQSINC),
  .GSR (GSR)
);

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "Model Technology", encrypt_agent_info = "6.6d"
`pragma protect author = "Xilinx" , author_info = "mcb.009"
`pragma protect data_method = "aes256-cbc"
`pragma protect key_keyowner = "MTI" , key_keyname = "MGC-DVT-MTI" , key_method = "rsa"
`pragma protect key_block encoding = (enctype = "base64", line_length = 64, bytes = 128)
PaS2+jRwO2WX2Y2DIh0YCQNU1n9X0aQeibUqqBjI3uFe7pzP7hZTXz2Gk0v150z1
Cvk8zkI8G7+4wqbZZJKoNMDZGMxMNy5+sMMJQphhty3NgRfDZ1ym8qbTJs6Bpa09
VuvTbS95/TZ3jCzUvG53p8UA1ASsfrOSNbzbLtjWquc=
`pragma protect data_block encoding = (enctype = "base64", line_length = 64, bytes = 464)
G2+F+xBPc8BoqeeyMuZRjDcvUIM/GBX0dG4BWiSdVf/NX53WhwLllk9ShL2ka7me
GLinAMi+9T0n1f8OSabm0hufWBd5kaJNc7+9tjjziK21Z05cNlvBGqg3QUL8yTnN
YY84RHErN52hp28Ev47RHdc7h2dUs++/+eHzT4NP3FPKY8MGOVnbfJ1bYh1NGdQF
j1mG/RBJm7a3p+fgHmzbdRIALOd9Fmbod8y7lzSjCbNhcP/X+AjcZ3A6vA9Pps8/
sKZtSY7/+m0bz6UyDBuWEuXyuN0S7Ye75E+ts4pemIBuzBOuDHCD1FLigwJrb97Z
95PnWwTR5cfU09Zz7IrTRwkAP0rxQxYGl72f6GF/eqs7cIHguDOAXvN/mszLHard
wtAWZDf6JFq9hoY0QAVPtKfUPhcZwUyxmFIphfSzbPwQKVX9rWybWYWG6pJpyvds
ywStQfNuHCt4IBi6zF+J8wAlQg05UxVePCT173F6GVZSZSZxF4rsvU0AiTVRim/4
nx/MMdXQDxYQ6ALGtzvv4Ql83c8CuRc2HwXxdVR/SjNJLk/kvjkf4+9rqX3bGH3H
BhZ82VRSAB5N9JJGRhHdsBPqLDa0uOvU08SyPxttP1U=
`pragma protect end_protected
